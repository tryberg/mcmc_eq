#!/bin/csh

\rm .gmt*
gmtset MEASURE_UNIT INCH
gmtset ANOT_FONT_SIZE 8
gmtset HEADER_FONT_SIZE 8
gmtset HEADER_OFFSET 0.5c
gmtset LABEL_FONT_SIZE 8
gmtset COLOR_NAN  0/0/100
setenv LC_NUMERIC C.UTF-8

set cfg = config_eqx.dat
ls $cfg
test -f $cfg || exit

set exe = analyse_eq
which $exe
test -z "`whereis -q -b $exe`" && echo "can't find $exe" && exit

set eq   = `awk '{if (NR==30) print $1}' $cfg` #needs to be past burn in phase!
set vv   = `awk '{if (NR==30) print $2}' $cfg`
set tot  = `echo $vv $eq | awk '{print $1+$2}'`

set str = "need (1) start model input number post burn-in, b/t $eq and $tot, (2) % of models (90% default) to include, and (3) % of models close to boundaries to exclude (3% default)"
echo reading $#argv inputs: $1 $2 $3
test $#argv -eq 3 || echo $str
test $#argv -eq 3 || exit

if ($1 > $eq && $1 < $tot) then
set bi = $1
else
echo "error: bad 1st input value"
echo $str
exit
endif

if ($2 >= 0 && $2 <= 100) then
set prms = $2
else
echo "error: bad 2nd input value (0-100%)"
echo $str
exit
endif

if ($3 >= 0 && $3 <= 100) then
set p = $3
else
echo "error: bad 3nd input value (0-100%)"
echo $str
exit
endif

set output = xselect_${bi}_${prms}_${p}
################################################################################################
#set p = 3.0 # percentage of range value to detect proximity to technical boundary
#set prms = 90 # percentage of RMS
#set bi = 200000

set f = 1
awk '{if (NR==1) print $1/"'$f'"; if ((NR==2) || (NR==3) || (NR==4)) print $1*"'$f'"; if (NR>4) print $0}' $cfg >! configa.dat

set d    = `awk '{if (NR==1) print $1}' configa.dat`
set nx   = `awk '{if (NR==4) print $1}' configa.dat`
set zmin = `awk '{if (NR==7) print $1}' configa.dat`
set zmax = `echo $zmin $nx $d | awk '{print $1+$2*$3}'`

set vmin = `awk '{if (NR==9) print $1}' configa.dat`
set vmax = `awk '{if (NR==10) print $1}' configa.dat`

set v1 = `echo $vmax $vmin | awk '{print $2+($1-$2)*"'$p'"/100.0}'`
set v2 = `echo $vmax $vmin | awk '{print $1-($1-$2)*"'$p'"/100.0}'`


set vmins = `awk '{if (NR==11) print $1}' configa.dat`
set vmaxs = `awk '{if (NR==12) print $1}' configa.dat`
set vs1 = `echo $vmaxs $vmins | awk '{print $2+($1-$2)*"'$p'"/100.0}'`
set vs2 = `echo $vmaxs $vmins | awk '{print $1-($1-$2)*"'$p'"/100.0}'`


set vminvs = 0.25
set vmaxvs = 6.93


touch tmp; \rm tmp; touch tmp
foreach n ( rjx-*.out )
 echo $n
 awk '{if (($3>1*"'$bi'") && ($3<300000)) print $0}' $n | awk '{if ($2!="BF") print $0}' | awk '{if ($1!="cnt") print $0}' >> tmp
end

# remove models which are close to technical boundaries
awk '{if ($1=="mod") {f=0; for (i=0; i<$4; i++) {b=14+i*3+1; c=14+i*3+2; if ($b<1*"'$v1'") {f=f+1;} if ($b>1*"'$v2'") {f=f+1;} if ($c<1*"'$vs1'") {f=f+1;} if ($c>1*"'$vs2'") {f=f+1;}}} if (f==0) print $0}' tmp >! tmpy

# only models which are close to technical boundaries - testing
#awk '{if ($1=="mod") {f=0; for (i=0; i<$4; i++) {b=14+i*3+1; c=14+i*3+2; if ($b<1*"'$v1'") {f=f+1;} if ($b>1*"'$v2'") {f=f+1;} if ($c<1*"'$vs1'") {f=f+1;} if ($c>1*"'$vs2'") {f=f+1;}}} if (f!=0) print $0}' tmp >! tmpy


set tmax = `awk '{print $5}' tmpy | pshistogram -R0/20/0/110 -W0.00001 -Z1 -Q -G0 -K -O -V -Io | awk '{if ($2>=1*"'$prms'") printf"%f\n", $1}' | head -1`
awk '{if ($5<(1.0*"'$tmax'")) print $0}' tmpy >! tmpx

# count post burn-in models
set all = `egrep mod tmp | wc | awk '{print $1}'`
set allp = `egrep mod tmpy | wc | awk '{print $1}'`
set allr = `egrep mod tmpx | wc | awk '{print $1}'`


set dv = 0.01
set dvpvs = 0.01

$exe configa.dat tmpx $dv $dvpvs  >! resmcnx.dat

# ------- PPPPPPP
awk '{if ($1=="BINP") print $2, $3, $4}' resmcnx.dat | awk '{if ($3>0) print $0}' | xyz2grd -I$dv/$d -R$vmin/$vmax/$zmin/$zmax -Ghistp.grd -V
#set hmax = `grdinfo histp.grd | egrep z_max | awk '{print $5}'`

#makecpt -Cseis -Z -T0/$hmax/1 -D -I >! colv.cpt
grd2cpt -Cseis -Z -D -I histp.grd >! colv.cpt

# model
psbasemap -JX1.8/-6 -R$vmin/$vmax/$zmin/$zmax -B1f0.5:"Vp":/10f5g10000SeWN -K -Y1.6 -X0.4 >! ${output}.ps
grdimage histp.grd -JX -R -Ccolv.cpt -K -O >> ${output}.ps
echo $vmin $zmax $bi $p $prms $all $allp $allr `pwd`| awk '{print $1, $2*1.15, 10,0,0,0,"BI",$3,"P",$4,"PRMS",$5,$6,"/",$7,"/",$8, $9}' | pstext -JX -R -K -O -N >> ${output}.ps


# hist count
psbasemap -JX  -R  -B1f0.5:"Vp":/10f5g10000SewN -K  -X2.05 -O >> ${output}.ps
#awk '{if ($1=="STAN") print $11, $2}' resmcnx.dat | awk '{if (NR==1) {v0=$1;} print v0, $2; print $1, $2; v0=$1;}' | psxy -JX -R -W3/green -O -K -N  >> ${output}.ps


# modified

awk '{if ($1=="STAN") print $7, $2}' resmcnx.dat | awk '{if (NR==1) {v0=$1;} print v0, $2; print $1, $2; v0=$1;}' | psxy -JX -R -W5/red -O -K -N  >> ${output}.ps
awk '{if ($1=="STAN") print $7-$8, $2}' resmcnx.dat | awk '{if (NR==1) {v0=$1;} print v0, $2; print $1, $2; v0=$1;}' | psxy -JX -R -W1/gray -O -K -N  >> ${output}.ps
awk '{if ($1=="STAN") print $7+$8, $2}' resmcnx.dat | awk '{if (NR==1) {v0=$1;} print v0, $2; print $1, $2; v0=$1;}' | psxy -JX -R -W1/gray -O -K -N  >> ${output}.ps
#awk '{if ($1=="STAN") print $3, $2}' resmcnbf.dat | awk '{if (NR==1) {v0=$1;} print v0, $2; print $1, $2; v0=$1;}' | psxy -JX -R -W5/blue -O -K -N  >> ${output}.ps

# boundary
set max = `awk '{if ($1=="STAN") print $13*1.1}' resmcnx.dat | sort -n | tail -1 | awk '{x=$1; if ($1==0) x=1; print x}'`
set max = 1
psbasemap -JX1/-6  -R0/$max/$zmin/$zmax  -B100f5:"Boundary":/10f5g10000SewN -K  -X2.05 -O >> ${output}.ps
awk '{if ($1=="STAN") print $13, $2}' resmcnx.dat | awk '{if (NR==1) {v0=$1;} print v0, $2; print $1, $2; v0=$1;}' | psxy -JX -R -W3/black -O -K -N  >> ${output}.ps

# ------- SSSSSSS
awk '{if ($1=="BINV") print $2, $3, $4}' resmcnx.dat | awk '{if ($3>0) print $0}' | xyz2grd -I$dvpvs/$d -R$vmins/$vmaxs/$zmin/$zmax -Ghists.grd -V
#set hmax = `grdinfo hists.grd | egrep z_max | awk '{print $5}'`

#makecpt -Cseis -Z -T0/$hmax/1 -D -I >! colv.cpt
grd2cpt -Cseis -Z -D -I histp.grd >! colv.cpt

psbasemap -JX1.8/-6 -R$vmins/$vmaxs/$zmin/$zmax -B1f0.5:"Vp/Vs":/10f5g1000SewN -K -O -X1.2 >> ${output}.ps
grdimage hists.grd -JX -R -Ccolv.cpt -K -O >> ${output}.ps


# hist count
psbasemap -JX  -R  -B1f0.5g1.732:"Vp/Vs":/10f5g1000SewN -K  -X2.05 -O >> ${output}.ps
#awk '{if ($1=="STAN") print $12, $2}' resmcnx.dat | awk '{if (NR==1) {v0=$1;} print v0, $2; print $1, $2; v0=$1;}' | psxy -JX -R -W3/green -O -K -N  >> ${output}.ps


# modified

awk '{if ($1=="STAN") print $9, $2}' resmcnx.dat | awk '{if (NR==1) {v0=$1;} print v0, $2; print $1, $2; v0=$1;}' | psxy -JX -R -W5/red -O -K -N  >> ${output}.ps
awk '{if ($1=="STAN") print $9-$10, $2}' resmcnx.dat | awk '{if (NR==1) {v0=$1;} print v0, $2; print $1, $2; v0=$1;}' | psxy -JX -R -W1/gray -O -K -N  >> ${output}.ps
awk '{if ($1=="STAN") print $9+$10, $2}' resmcnx.dat | awk '{if (NR==1) {v0=$1;} print v0, $2; print $1, $2; v0=$1;}' | psxy -JX -R -W1/gray -O -K -N  >> ${output}.ps
#awk '{if ($1=="STAN") print $5, $2}' resmcnbf.dat | awk '{if (NR==1) {v0=$1;} print v0, $2; print $1, $2; v0=$1;}' | psxy -JX -R -W5/blue -O -K -N  >> ${output}.ps

psbasemap -JX1.5/-6 -R$vminvs/$vmaxvs/$zmin/$zmax -B1f0.5:"Vs":/10f5g10000SEwN -K -O -X2.05 >> ${output}.ps

awk '{if ($1=="STAN") print $7/$9, $2}' resmcnx.dat  | awk '{if (NR==1) {v0=$1;} print v0, $2; print $1, $2; v0=$1;}' | psxy -JX -R -W5/red -O -K -N  >> ${output}.ps

awk '{if ($1=="STAN") {f=$7/$9; x1=$8/$7; x2=$10/$9; df=f*sqrt(x1*x1+x2*x2); print f+df, $2}}' resmcnx.dat | awk '{if (NR==1) {v0=$1;} print v0, $2; print $1, $2; v0=$1;}' | psxy -JX -R -W1/gray -O -K -N  >> ${output}.ps
awk '{if ($1=="STAN") {f=$7/$9; x1=$8/$7; x2=$10/$9; df=f*sqrt(x1*x1+x2*x2); print f-df, $2}}' resmcnx.dat | awk '{if (NR==1) {v0=$1;} print v0, $2; print $1, $2; v0=$1;}' | psxy -JX -R -W1/gray -O -K -N  >> ${output}.ps


#awk '{if ($1=="STAN") print $7/$9, $2}' resmcnbf.dat | awk '{if (NR==1) {v0=$1;} print v0, $2; print $1, $2; v0=$1;}' | psxy -JX -R -W5/blue -O -K -N  >> ${output}.ps
#awk '{if ($1=="STAN") print $11/$12, $2}' resmcnx.dat | awk '{if (NR==1) {v0=$1;} print v0, $2; print $1, $2; v0=$1;}' | psxy -JX -R -W3/green -O -K -N  >> ${output}.ps

echo 0 0 | psxy -JX -R -B0 -Sc0.001 -O >> ${output}.ps

\rm configa.dat
ps2raster -Tg ${output}.ps -A
ls ${output}.ps
ls ${output}.png

test "`uname`" == "Darwin" && open ${output}.png
